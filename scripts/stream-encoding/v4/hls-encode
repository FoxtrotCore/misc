#!/bin/bash

#Linux Script to create HLS stream from a Master Copy of an Episode
#Version 4

# Reset
Reset='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Program Constants
ARGS=( "$@" )
ARG_LENGTH=${#ARGS[@]}
DEPS=( ffmpeg gsutil )
EXE_NAME=$(echo $0 | rev | cut -d '/' -f 1 | rev)
EXE_INSTALL_PATH="/usr/bin/$EXE_NAME"
GCS_BUCKET="gs://ftf-public/s"

# File stuff
OUTPUT_DIR=$PWD

# Encoding mode
#  1: Encoding mode
#			- 0 1440p [Default]
#			- 1 360p
# 		- 2 Variant (Test Encoding mode)
ENCODING_MODE=0
FORCE_PURGE=0
UPLOAD=0
DEBUG=0
VERBOSITYFLAG="-v warning -stats "
COMMANDECHOFLAG="set +x"
SEEKTIME=""
DURATION=""

function usage() {
	echo -e "Usage: $EXE_NAME [OPTIONS] <Episode Number (0-95)> <Video Directory>"
	echo -e "\tSimple Options:"
	echo -e "\t\t-[d/D]: Specifies a different working directory for the output files"
	echo -e "\t\t-[e/E]: Sets the encoding to 360p specs"
	echo -e "\t\t-[i/I]: Force extraction of cover art"
	echo -e "\t\t-[s/S]: Force extraction of Subtitles"
	echo -e "\t\t-[f/F]: Force Overwrites preexisting files"
	echo -e "\t\t-[g/G]: Specifies the GCS bucket to upload to post-process (Default: $GCS_BUCKET)"
	echo -e "\t\t-[t/T]: Tests the encoding for 1 minute"
	echo -e "\t\t-[c/C]: Runs Custom encoding Test"
	echo -e "\t\t-[u/U]: Uploads to Google Cloud Storage post-process (requires gsutil)"
	echo -e "\t\t-[h/H]: Gets the help/usage menu"
	echo -e "\t\t-[v/V]: Enables verbose mode for $EXE_NAME"
	echo -e "\tComplex Options:"
	echo -e "\t\t--install: Automatically installs this program to $EXE_INSTALL_PATH"
	echo -e "\t\t--help: Stop it, get some help"
	echo -e "\tKey Info file expected in \'Output_Directory/encryption.keyinfo\'"
	exit 0
}

#
# 1: Message tag mode:
#   - 1 Say with info tag
#   - 2 Say with error tag
#   - 3 Say with warning tag
#
function say() {
	MODE=""

	if   [[ $1 == 1 ]]; then
		MODE="${Blue}INFO${Reset}"
	elif [[ $1 == 2 ]]; then
		MODE="${Red}ERROR${Reset}"
	elif [[ $1 == 3 ]]; then
		MODE="${Yellow}WARN${Reset}"
	fi

	echo -e "[$MODE]: $2"
}

#
# 1: Yes/No question
# 2: Confirm message
# 3: Deny message
#
function confirm() {
	local INPUT=""

	while [[ $INPUT != "Y" && $INPUT != "N"  ]]; do
		read -p "$1[Y/N]: " INPUT
		INPUT=${INPUT^^}

		if [[ $INPUT = "Y" ]]; then
			say 3 "${Blue}$2${Reset}"
			return 1
		elif [[ $INPUT = "N" ]]; then
			say 3 "${Blue}$3${Reset}"
			return 0
		else
			say 2 "Invalid option: $INPUT"
			continue
		fi
	done
}

function install() {
	say 3 "Installing $EXE_NAME to $EXE_INSTALL_PATH"

	if [[ $0 == "/usr/bin"*  ]]; then
		say 2 "${Yellow}$EXE_NAME is already installed, you dingus!\n\tThis instance of $EXE_NAME is currently running from $0${Reset}\n\tIf you'd like to install a new version of it, download it to somewhere outside of /usr/bin and run path_to_new_version/$EXE_NAME --install"
	else
		if [ -f $EXE_INSTALL_PATH ]; then
			say 3 "${Yellow}File exists at $EXE_INSTALL_PATH${Reset}"
			confirm "Would you like to overwrite this file?" "Removing the pre-existing file!" "Did not install $EXE_NAME globally!"

			if [[ $? == 1 ]]; then
				sudo rm $EXE_INSTALL_PATH
			else
				exit 1
			fi
		fi

		sudo mv $0 $EXE_INSTALL_PATH
		sudo chown root $EXE_INSTALL_PATH
		sudo chgrp root $EXE_INSTALL_PATH
		sudo chmod 755 $EXE_INSTALL_PATH
	fi

	exit 0
}

function encode_test(){
	say 1 "${Red}Test encoding is currently not enabled!\n\t${Blue}Gracefully exiting.${Reset}"
	exit 0
}

#Edit Webvtt subs to include actor tags for optional per CUE CSS
createActorTags () {
	awk -F , '/Dialogue:/ {print $4}' "$OUTPUT_DIR/$EP/rawSubs.ass" > "$OUTPUT_DIR/$EP/actors.txt"
	awk '/-->/ {print NR }' "$OUTPUT_DIR/$EP/FFSubs.vtt" > "$OUTPUT_DIR/$EP/times.txt"
	local CUE_COUNT=$(awk 'END {print NR}' "$OUTPUT_DIR/$EP/actors.txt")
	for((i=1;i<=CUE_COUNT;i++)); do
		local ACTOR=$(sed -n "$i"p "$OUTPUT_DIR/$EP/actors.txt")
		local ACTOR=$(echo $ACTOR | sed 's/[. ]//g')
		local LINE=$(sed -n "$i"p "$OUTPUT_DIR/$EP/times.txt")
		sed -i "$((LINE + 1)) s/^/<v $ACTOR>/" "$OUTPUT_DIR/$EP/FFSubs.vtt"
	done
	say 1 "${Green}Actor Tags Inserted Into VTT Subs$Reset"
}

#Gets Actor Styles from ASS subs and creates unique corrisponding CSS for colorizing
#Assumes rawSubs.ass exists from createActorTags
createActorCSS () {
	echo -e "/*Episode $EP Subtitle Cue CSS for Actors*/\n\n::cue {\n  background-color: #00000030;\n  text-shadow: 3px 3px #000000;\n  font-family: Ariel, sans-serif;\n  font-weight: bold;\n  letter-spacing: 1px;\n  }\n" > "$OUTPUT_DIR/$EP/actorColors.css"
	grep "^Style: " "$OUTPUT_DIR/$EP/rawSubs.ass" | while read -r line
	do
		local ACTOR=$(echo $line | cut -d , -f 1)
		local ACTOR="${ACTOR:7}"
		local ACTOR=$(echo $ACTOR | sed 's/[. ]//g')
		local COLOR=$(echo $line | cut -d , -f 6)
		local COLOR="${COLOR:8:2}${COLOR:6:2}${COLOR:4:2}"
		echo "::cue(v[voice=\"$ACTOR\"]) { -webkit-text-stroke: 2px #$COLOR; }" >> "$OUTPUT_DIR/$EP/actorColors.css"
		say 1 "Actor: $ACTOR has Color: #$COLOR"
	done
	say 1 "${Green}Actor Color CSS Extracted From ASS Subs$Reset"
}

createFTFSubtitles () {
	($COMMANDECHOFLAG; ffmpeg -y -hide_banner $VERBOSITYFLAG-i "$INPUT_FILE" -map 0:s:0 -c copy "$OUTPUT_DIR/$EP/rawSubs.ass")
	if [ ! $? -eq 0 ]; then
		if [ $FORCE_SUBTITLES -eq 1 ]; then
			say 2 "${Red}Subtitles not Found! Exiting now...$Reset"
			exit 1
		else
			say 3 "Subtitles not Found. Ignoring..."
			return 1
		fi
	fi
	say 1 "${Green}Raw ASS Subs Extracted$Reset"
	($COMMANDECHOFLAG; ffmpeg -y -hide_banner $VERBOSITYFLAG-i "$INPUT_FILE" -map 0:s:0 -c webvtt "$OUTPUT_DIR/$EP/FFSubs.vtt")
	say 1 "${Green}WebVTT Subs Converted from ASS Subs$Reset"
	createActorTags
	createActorCSS
	return 0
}

createFTFCoverArt () {
($COMMANDECHOFLAG; ffmpeg -y -hide_banner $VERBOSITYFLAG-i "$INPUT_FILE" -map 0:v:1 -frames:v 1 -c copy "$OUTPUT_DIR/$EP/cover.png")
if [ $? -eq 0 ]; then
	say 1 "${Green}Cover Art Extracted$Reset"
else
	if [ $FORCE_COVERART -eq 1 ]; then
		say 2 "${Red}Cover Art Not Found! Exiting...$Reset"
		exit 1
	else
		say 3 "Cover Art Not Found. Continuing..."
	fi
fi
}

#1= Boolean useMasterManifestsVSErrorMoleManifests, 2= Text
prependMetadata () {
	if [ $1 -eq 1 ]; then
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/master.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-0-1440.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-1-1080.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-2-720.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-3-480.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-a-ENG.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-a-FRE.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/manifest-s.m3u8"
	else
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/master-mole.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/stream-360p_vtt.m3u8"
		sed -i "/#EXT-X-VERSION:3/a ##$2" "$OUTPUT_DIR/$EP/stream-360p.m3u8"
	fi
}

encode_1440 () {
	createFTFCoverArt
	createFTFSubtitles
	USE_SUBS=$?
	if [ $USE_SUBS -eq 0 ]; then
		($COMMANDECHOFLAG; ffmpeg -y -hide_banner $VERBOSITYFLAG-i "$INPUT_FILE" -i "$OUTPUT_DIR/$EP/FFSubs.vtt" -map 0:v:0 -map 1:s:0 -c copy -f hls -hls_list_size 0 -hls_allow_cache 1 -hls_playlist_type vod -hls_segment_filename "$OUTPUT_DIR/$EP/data_%04d.ts" "$OUTPUT_DIR/$EP/stream-s_.m3u8")
		say 1 "${Green}Subtitle HLS Stream Created$Reset"
		mv "$OUTPUT_DIR/$EP/stream-s__vtt.m3u8" "$OUTPUT_DIR/$EP/manifest-s.m3u8"
	fi
	($COMMANDECHOFLAG; ffmpeg -y -hide_banner $VERBOSITYFLAG-i "$INPUT_FILE" -filter_complex "[0:v]scale=-1:1080[stream1];[0:v]scale=-1:720[stream2];[0:v]scale=-1:480[stream3]" -map 0:v:0 -map [stream1] -map [stream2] -map [stream3] -map 0:a:0 -map 0:a:1 -c:a copy -c:v libx264 -pix_fmt yuv420p -profile:v high -level:v 5.2 -crf 17 -preset:v:0 veryfast -b:v:0 150k -preset:v:1 medium -b:v:1 100k -preset:v:2 veryslow -b:v:2 55k -preset:v:3 veryslow -b:v:3 26k $TEST_STREAM-f hls -var_stream_map "v:0,name:0-1440,agroup:a,default:1 v:1,name:1-1080,agroup:a v:2,name:2-720,agroup:a v:3,name:3-480,agroup:a a:0,name:a-ENG,agroup:a,default:1,language:ENG a:1,name:a-FRE,agroup:a,default:0,language:FRE" -hls_init_time 4 -hls_time 4 -hls_list_size 0 -hls_allow_cache 0 -sc_threshold 0 -flags +cgop -g 100 -keyint_min 100 -hls_playlist_type vod -hls_segment_filename "$OUTPUT_DIR/$EP/stream-%v_%04d.ts" -master_pl_name master.m3u8 -hls_key_info_file "$OUTPUT_DIR/encryption.keyinfo" "$OUTPUT_DIR/$EP/manifest-%v.m3u8")
	if [[ $? != 0 ]]; then
		say 2 "${Red}There was an error encoding Audio/Video HLS Streams${Reset}\n\t${Blue}Exiting.${Reset}"
		exit 1
	else
		say 1 "${Green}Audio/Video HLS Streams Created$Reset"
	fi
	sed -i "s/NAME=\"audio_4\"/NAME=\"Offical English Dub\"/g" "$OUTPUT_DIR/$EP/master.m3u8"
	sed -i "s/NAME=\"audio_5\"/NAME=\"Offical French Dub\"/g" "$OUTPUT_DIR/$EP/master.m3u8"
	sed -i "s/\"group_a\"/\"aud\"/g" "$OUTPUT_DIR/$EP/master.m3u8"
	if [ $USE_SUBS -eq 0 ]; then
		sed -i "/#EXT-X-VERSION:3/a #EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID=\"sub\",NAME=\"FTF English Subs\",DEFAULT=YES,FORCED=NO,URI=\"manifest-s.m3u8\",LANGUAGE=\"ENG\"" "$OUTPUT_DIR/$EP/master.m3u8"
		sed -i "s/AUDIO=\"aud\"/AUDIO=\"aud\",SUBTITLES=\"sub\"/g" "$OUTPUT_DIR/$EP/master.m3u8"
	fi
	prependMetadata 1 "Created on $(date +"%D %T")"
	if [ ! -z "$TITLE" ]; then
		prependMetadata 1 "Episode: $TITLE"
	fi
	prependMetadata 1 "FoxTrot Fanatics Upscaled HLS Stream"
	say 1 "${Green}Master HLS Manifest perfected$Reset"
	for i in $(ls "$OUTPUT_DIR/$EP" | grep data)
	do
		rm -f "$OUTPUT_DIR/$EP/$i"
	done
	rm -f "$OUTPUT_DIR/$EP/rawSubs.ass"
	rm -f "$OUTPUT_DIR/$EP/actors.txt"
	rm -f "$OUTPUT_DIR/$EP/times.txt"
	rm -f "$OUTPUT_DIR/$EP/stream-s_.m3u8"
	rm -f "$OUTPUT_DIR/$EP/FFSubs.vtt"
	say 1 "${Green}Temp Files Removed$Reset"
}

encode_360 () {
	createFTFCoverArt
	createFTFSubtitles
	USE_SUBS=$?
	SUB_LINE1=""
	SUB_LINE2="";
	SUB_LINE3="";
	if [ $USE_SUBS -eq 0 ]; then
		SUB_LINE1="-i $OUTPUT_DIR/$EP/FFSubs.vtt "
		SUB_LINE2="-map 1:s:0 "
		SUB_LINE3=",s:0"
	fi
	ffmpeg -y -hide_banner $VERBOSITYFLAG-i "$INPUT_FILE" $SUB_LINE1-map 0:v:0 -map 0:a:0 $SUB_LINE2-sc_threshold 0 -g 100 -keyint_min 100 -c:a aac -b:a 128k -profile:a aac_low -c:v libx264 -pix_fmt yuv420p -profile:v high -level:v 5.2 -b:v 25k -crf 24 -s 480x360 -preset veryslow -movflags +faststart -c:s copy $TEST_STREAM-f hls -var_stream_map "v:0,a:0$SUB_LINE3" -hls_init_time 4 -hls_time 4 -hls_list_size 0 -hls_allow_cache 1 -hls_playlist_type vod -hls_segment_filename "$OUTPUT_DIR/$EP/stream-360p_%05d.ts" -master_pl_name master-mole.m3u8 -hls_key_info_file "$OUTPUT_DIR/encryption.keyinfo" "$OUTPUT_DIR/$EP/stream-360p.m3u8"
	if [[ $? != 0 ]]; then
		say 2 "${Red}There was an error encoding Audio/Video/Subtitle HLS Streams${Reset}\n\t${Blue}Exiting.${Reset}"
		exit 1
	else
		say 1 "${Green}Audio/Video/Subtitle HLS Streams Created$Reset"
	fi
	if [ $USE_SUBS -eq 0 ]; then
		sed -i "/#EXT-X-VERSION:3/a #EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID=\"subs\",NAME=\"English\",DEFAULT=YES,FORCED=NO,URI=\"stream-360p_vtt.m3u8\",LANGUAGE=\"en\"" "$OUTPUT_DIR/$EP/master-mole.m3u8"
		if [[ $? != 0 ]]; then
			say 2 "${Red}There was an error Writing to file $2${Reset}/master-mole.m3u8\n\t${Blue}Gracefully exiting.${Reset}"
			exit 1
		else
			say 1 "${Green}Master HLS Manifest perfected$Reset"
		fi
	fi
	prependMetadata 0 "Created on $(date +"%D %T")"
	if [ ! -z "$TITLE" ]; then
		prependMetadata 0 "Episode: $TITLE"
	fi
	prependMetadata 0 "FoxTrot Fanatics Error Mole HLS Stream"
	rm -f "$OUTPUT_DIR/$EP/rawSubs.ass"
	rm -f "$OUTPUT_DIR/$EP/actors.txt"
	rm -f "$OUTPUT_DIR/$EP/times.txt"
	rm -f "$OUTPUT_DIR/$EP/FFSubs.vtt"
	say 1 "${Green}Temp Files Removed$Reset"
}

function upload(){
	say 1 "Uploading objects to $GCS_BUCKET from $1"
	if [[ $DEBUG = 1 ]]; then echo "gsutil cp -r $1 $GCS_BUCKET"; fi

	if [ ! -z "$(ls $1)" ]; then
		gsutil cp -r $1 $GCS_BUCKET
	else
		say 3 "${Yellow}Directory: $1 is empty!\n\tSkipping upload to GCS!${Reset}"
	fi
}

#
# Process all tokens
#
FORCE_SUBTITLES=0
FORCE_COVERART=0
for (( i=0; i<$ARG_LENGTH; i++ )) do
	# Get current and next arguments
	ARG=${ARGS[i]}
	NEXT_ARG=${ARGS[i + 1]}

	#
	# Check for flags
	#
	if [ ${ARG:0:2} = "--" ]; then
		LET=${ARG:2}

		if [ $LET = "install"  ]; then
			install
		elif [ $LET = "help" ]; then
			usage
		else
			say 2 "${Red}Unrecognized complex option: $ARG${Reset}\n"
			usage
		fi
	elif [ ${ARG:0:1} = "-" ]; then
		LET=${ARG:1:1}
		LET=${LET^^}

		if [[ $LET = "H" ]]; then     # Get help
		usage
	elif [ $LET = "D" ]; then
		OUTPUT_DIR=$NEXT_ARG
		i=$((i + 1))
	elif [ $LET = "E" ]; then
		ENCODING_MODE=1
	elif [ $LET = "F" ]; then
		FORCE_PURGE=1
	elif [ $LET = "G" ]; then
		GCS_BUCKET=$NEXT_ARG
		i=$((i + 1))
	elif [ $LET = "T" ]; then
		TEST_STREAM="-t 60 "
	elif [ $LET = "C" ]; then
		ENCODING_MODE=2
	elif [ $LET = "S" ]; then
		FORCE_SUBTITLES=1
	elif [ $LET = "I" ]; then
		FORCE_COVERART=1
	elif [ $LET = "U" ]; then
		UPLOAD=1
	elif [ $LET = "V" ]; then
		DEBUG=1
	else
		say 2 "${Red}Unrecognized simple option: $ARG${Reset}\n"
		usage
	fi
fi
done

#
# Main process
#

# Checks if there are args
if [ $ARG_LENGTH -lt 2 ]; then
	say 2 "${Red}Expected 2 arguments, got $ARG_LENGTH!${Reset}\n"
	usage
fi

# Check / convert user input
EPISODE_NUM=${ARGS[$ARG_LENGTH - 2]}
LEN=${#EPISODE_NUM}

# User input validation and padding
if [[ ! ($EPISODE_NUM =~ ^[0-9]+$) || $LEN > 3 || $LEN < 1 || (${EPISODE_NUM:0:1} = "0" && $LEN > 1) ]]; then
	say 2 "${Red}Invalid episode number: $EPISODE_NUM\n\tPlease enter an integer (0-95)${Reset}\n"
	usage
elif [[ $LEN == 2 ]]; then
	EP="0"$EPISODE_NUM
elif [[ $LEN == 1 ]]; then
	EP="00"$EPISODE_NUM
else
	EP=$EPISODE_NUM
fi

# Check for pre-existing files
INPUT_FILE=${ARGS[$ARG_LENGTH - 1]}
if [ ! -d "$INPUT_FILE" ]; then
	say 2 "${Red}Input Directory: $INPUT_FILE does not exist!\n\tPlease supply the necessary Multiplexed Video in the  directory!${Reset}"
	exit 1
else
	if [[ ! "${INPUT_FILE: -1}" == "/" ]]; then
		INPUT_FILE="$INPUT_FILE/"
	fi
	FILE=$(ls -a "$INPUT_FILE" | grep $EP)
	if [ -z "$FILE" ]; then
		say 2 "${Red}Input Video for EP $EP does not exist!\n\tPlease supply the necessary file in $INPUT_FILE directory with Episode Code $EP!${Reset}"
		exit 2
	else
		INPUT_FILE="$INPUT_FILE$FILE"
	fi
fi
if [ ! -d "$OUTPUT_DIR/$EP" ]; then
	say 3 "${Yellow}Directory: $OUTPUT_DIR/$EP does not exist!${Reset}\n\tCreating now!"
	mkdir -p -v "$OUTPUT_DIR/$EP"
fi
if [ ! -f "$OUTPUT_DIR/encryption.keyinfo" ]; then
	say 2 "${Red}File: $OUTPUT_DIR/encryption.keyinfo does not exist!${Reset}\n\tQuiting."
	exit 5
fi
TITLE=$(ffprobe -v quiet -show_entries format_tags=title -of default=noprint_wrappers=1:nokey=1 "$INPUT_FILE")


# Check for contents to be overwritten
if [ ! -z "$(ls "$OUTPUT_DIR/$EP")" ]; then
	say 3 "${Yellow}Directory $OUTPUT_DIR/$EP already has content!${Reset}"

	if [ $FORCE_PURGE = 1 ]; then
		say 3 "${Yellow}Automatically purging the contents in $OUTPUT_DIR/$EP!${Reset}"
		rm -rf "$OUTPUT_DIR/$EP/*"
	else
		confirm "Purge the contents for Episode $EPISODE_NUM?" "${Reset}Purging contents." "${Blue}No encoding can take place.\n\tGracefully exiting.${Reset}"
		if [[ $? == 1 ]]; then
			rm -rf "$OUTPUT_DIR/$EP/*"
		else
			exit 0
		fi
	fi
fi

# Prepare Variable flags
if [ $DEBUG = 1 ]; then
	say 1 "Debug mode enabled."
	VERBOSITYFLAG=""
	COMMANDECHOFLAG="set -x"
fi

if [ $ENCODING_MODE = 0 ]; then
	say 1 "${Blue}Encoding episode $EPISODE_NUM with the Production standard.${Reset}"
	encode_1440 $INPUT_FILE $OUTPUT_DIR
	say 1 "${Blue}Finished Encoding/Encrypting Production Stream for: $INPUT_FILE${Reset}\n\tWrote to path: $OUTPUT_DIR/$EP"
elif [ $ENCODING_MODE = 1 ]; then
	say 1 "${Yellow}Encoding episode $EPISODE_NUM with the Errormole standard.${Reset}"
	encode_360 $INPUT_FILE $OUTPUT_DIR
	say 1 "${Yellow}Finished Encoding/Encrypting Error Mole Stream for: $INPUT_FILE${Reset}\n\tWrote to path: $OUTPUT_DIR/$EP"
elif [ $ENCODING_MODE = 2 ]; then
	say 1 "Encoding episode $EPISODE_NUM with the variable test standard.${Reset}"
	encode_test $INPUT_FILE $OUTPUT_DIR
else
	say 2 "${Red}There was an issue trying to deterime the correct encoding mode!\n\t${Blue}No encoding can take place!\n\tGracefully exiting.${Reset}"
	exit 0
fi

if [ $UPLOAD = 1 ]; then
	upload "$OUTPUT_DIR/$EP"
fi
